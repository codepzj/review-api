// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 数据库错误
func IsGormBadErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GormBadErr.String() && e.Code == 500
}

// 数据库错误
func ErrorGormBadErr(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_GormBadErr.String(), fmt.Sprintf(format, args...))
}

// 订单重复评论错误
func IsReviewRepeatedErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ReviewRepeatedErr.String() && e.Code == 500
}

// 订单重复评论错误
func ErrorReviewRepeatedErr(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_ReviewRepeatedErr.String(), fmt.Sprintf(format, args...))
}

// 订单评论已回复错误
func IsReviewHasReplyErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ReviewHasReplyErr.String() && e.Code == 500
}

// 订单评论已回复错误
func ErrorReviewHasReplyErr(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_ReviewHasReplyErr.String(), fmt.Sprintf(format, args...))
}

// 未授权访问错误
func IsReviewUnauthorizedAccess(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_ReviewUnauthorizedAccess.String() && e.Code == 403
}

// 未授权访问错误
func ErrorReviewUnauthorizedAccess(format string, args ...interface{}) *errors.Error {
	return errors.New(403, ErrorReason_ReviewUnauthorizedAccess.String(), fmt.Sprintf(format, args...))
}
