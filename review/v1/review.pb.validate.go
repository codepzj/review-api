// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/review/v1/review.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateReviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateReviewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateReviewRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateReviewRequestMultiError, or nil if none found.
func (m *CreateReviewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateReviewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for OrderId

	// no validation rules for StoreId

	if utf8.RuneCountInString(m.GetContent()) < 10 {
		err := CreateReviewRequestValidationError{
			field:  "Content",
			reason: "value length must be at least 10 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateReviewRequest_PicInfo_Pattern.MatchString(m.GetPicInfo()) {
		err := CreateReviewRequestValidationError{
			field:  "PicInfo",
			reason: "value does not match regex pattern \"^(http|https)://.+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateReviewRequest_VideoInfo_Pattern.MatchString(m.GetVideoInfo()) {
		err := CreateReviewRequestValidationError{
			field:  "VideoInfo",
			reason: "value does not match regex pattern \"^(http|https)://.+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetScore(); val <= 0 || val > 5 {
		err := CreateReviewRequestValidationError{
			field:  "Score",
			reason: "value must be inside range (0, 5]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetServiceScore(); val <= 0 || val > 5 {
		err := CreateReviewRequestValidationError{
			field:  "ServiceScore",
			reason: "value must be inside range (0, 5]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetExpressScore(); val <= 0 || val > 5 {
		err := CreateReviewRequestValidationError{
			field:  "ExpressScore",
			reason: "value must be inside range (0, 5]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetAnonymous(); val < 0 || val > 1 {
		err := CreateReviewRequestValidationError{
			field:  "Anonymous",
			reason: "value must be inside range [0, 1]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateReviewRequestMultiError(errors)
	}

	return nil
}

// CreateReviewRequestMultiError is an error wrapping multiple validation
// errors returned by CreateReviewRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateReviewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateReviewRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateReviewRequestMultiError) AllErrors() []error { return m }

// CreateReviewRequestValidationError is the validation error returned by
// CreateReviewRequest.Validate if the designated constraints aren't met.
type CreateReviewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReviewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReviewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReviewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReviewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReviewRequestValidationError) ErrorName() string {
	return "CreateReviewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateReviewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReviewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReviewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReviewRequestValidationError{}

var _CreateReviewRequest_PicInfo_Pattern = regexp.MustCompile("^(http|https)://.+$")

var _CreateReviewRequest_VideoInfo_Pattern = regexp.MustCompile("^(http|https)://.+$")

// Validate checks the field values on CreateReviewResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateReviewResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateReviewResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateReviewResponseMultiError, or nil if none found.
func (m *CreateReviewResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateReviewResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReviewId

	if len(errors) > 0 {
		return CreateReviewResponseMultiError(errors)
	}

	return nil
}

// CreateReviewResponseMultiError is an error wrapping multiple validation
// errors returned by CreateReviewResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateReviewResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateReviewResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateReviewResponseMultiError) AllErrors() []error { return m }

// CreateReviewResponseValidationError is the validation error returned by
// CreateReviewResponse.Validate if the designated constraints aren't met.
type CreateReviewResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReviewResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReviewResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReviewResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReviewResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReviewResponseValidationError) ErrorName() string {
	return "CreateReviewResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateReviewResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReviewResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReviewResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReviewResponseValidationError{}

// Validate checks the field values on ReviewReplyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReviewReplyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReviewReplyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReviewReplyRequestMultiError, or nil if none found.
func (m *ReviewReplyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReviewReplyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReviewId

	// no validation rules for StoreId

	if utf8.RuneCountInString(m.GetContent()) < 10 {
		err := ReviewReplyRequestValidationError{
			field:  "Content",
			reason: "value length must be at least 10 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ReviewReplyRequest_PicInfo_Pattern.MatchString(m.GetPicInfo()) {
		err := ReviewReplyRequestValidationError{
			field:  "PicInfo",
			reason: "value does not match regex pattern \"^(http|https)://.+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ReviewReplyRequest_VideoInfo_Pattern.MatchString(m.GetVideoInfo()) {
		err := ReviewReplyRequestValidationError{
			field:  "VideoInfo",
			reason: "value does not match regex pattern \"^(http|https)://.+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReviewReplyRequestMultiError(errors)
	}

	return nil
}

// ReviewReplyRequestMultiError is an error wrapping multiple validation errors
// returned by ReviewReplyRequest.ValidateAll() if the designated constraints
// aren't met.
type ReviewReplyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReviewReplyRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReviewReplyRequestMultiError) AllErrors() []error { return m }

// ReviewReplyRequestValidationError is the validation error returned by
// ReviewReplyRequest.Validate if the designated constraints aren't met.
type ReviewReplyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReviewReplyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReviewReplyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReviewReplyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReviewReplyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReviewReplyRequestValidationError) ErrorName() string {
	return "ReviewReplyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReviewReplyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReviewReplyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReviewReplyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReviewReplyRequestValidationError{}

var _ReviewReplyRequest_PicInfo_Pattern = regexp.MustCompile("^(http|https)://.+$")

var _ReviewReplyRequest_VideoInfo_Pattern = regexp.MustCompile("^(http|https)://.+$")

// Validate checks the field values on ReviewReplyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReviewReplyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReviewReplyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReviewReplyResponseMultiError, or nil if none found.
func (m *ReviewReplyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReviewReplyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReplyId

	if len(errors) > 0 {
		return ReviewReplyResponseMultiError(errors)
	}

	return nil
}

// ReviewReplyResponseMultiError is an error wrapping multiple validation
// errors returned by ReviewReplyResponse.ValidateAll() if the designated
// constraints aren't met.
type ReviewReplyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReviewReplyResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReviewReplyResponseMultiError) AllErrors() []error { return m }

// ReviewReplyResponseValidationError is the validation error returned by
// ReviewReplyResponse.Validate if the designated constraints aren't met.
type ReviewReplyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReviewReplyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReviewReplyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReviewReplyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReviewReplyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReviewReplyResponseValidationError) ErrorName() string {
	return "ReviewReplyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReviewReplyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReviewReplyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReviewReplyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReviewReplyResponseValidationError{}
