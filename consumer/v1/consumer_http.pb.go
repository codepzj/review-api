// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.9.0
// - protoc             v5.27.1
// source: consumer/v1/consumer.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationConsumerCreateReview = "/api.consumer.v1.Consumer/CreateReview"

type ConsumerHTTPServer interface {
	// CreateReview 创建评论
	CreateReview(context.Context, *CreateConsumerRequest) (*CreateConsumerReply, error)
}

func RegisterConsumerHTTPServer(s *http.Server, srv ConsumerHTTPServer) {
	r := s.Route("/")
	r.POST("/consumer/v1/review", _Consumer_CreateReview1_HTTP_Handler(srv))
}

func _Consumer_CreateReview1_HTTP_Handler(srv ConsumerHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateConsumerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConsumerCreateReview)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateReview(ctx, req.(*CreateConsumerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateConsumerReply)
		return ctx.Result(200, reply)
	}
}

type ConsumerHTTPClient interface {
	// CreateReview 创建评论
	CreateReview(ctx context.Context, req *CreateConsumerRequest, opts ...http.CallOption) (rsp *CreateConsumerReply, err error)
}

type ConsumerHTTPClientImpl struct {
	cc *http.Client
}

func NewConsumerHTTPClient(client *http.Client) ConsumerHTTPClient {
	return &ConsumerHTTPClientImpl{client}
}

// CreateReview 创建评论
func (c *ConsumerHTTPClientImpl) CreateReview(ctx context.Context, in *CreateConsumerRequest, opts ...http.CallOption) (*CreateConsumerReply, error) {
	var out CreateConsumerReply
	pattern := "/consumer/v1/review"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConsumerCreateReview))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
